{"ast":null,"code":"// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\n// and https://github.com/bpampuch/pdfmake/issues/205\n\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\n\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\n//var util = require(\"util\"); // to debug\nfunction htmlToPdfMake(htmlText, options) {\n  'use strict';\n\n  this.wndw = options && options.window ? options.window : window;\n  this.tableAutoSize = options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false;\n  this.imagesByReference = options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false; // Used with the size attribute on the font elements to calculate relative font size\n\n  this.fontSizes = options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]; // set default styles\n\n  this.defaultStyles = {\n    b: {\n      bold: true\n    },\n    strong: {\n      bold: true\n    },\n    u: {\n      decoration: 'underline'\n    },\n    del: {\n      decoration: 'lineThrough'\n    },\n    s: {\n      decoration: 'lineThrough'\n    },\n    em: {\n      italics: true\n    },\n    i: {\n      italics: true\n    },\n    h1: {\n      fontSize: 24,\n      bold: true,\n      marginBottom: 5\n    },\n    h2: {\n      fontSize: 22,\n      bold: true,\n      marginBottom: 5\n    },\n    h3: {\n      fontSize: 20,\n      bold: true,\n      marginBottom: 5\n    },\n    h4: {\n      fontSize: 18,\n      bold: true,\n      marginBottom: 5\n    },\n    h5: {\n      fontSize: 16,\n      bold: true,\n      marginBottom: 5\n    },\n    h6: {\n      fontSize: 14,\n      bold: true,\n      marginBottom: 5\n    },\n    a: {\n      color: 'blue',\n      decoration: 'underline'\n    },\n    strike: {\n      decoration: 'lineThrough'\n    },\n    p: {\n      margin: [0, 5, 0, 10]\n    },\n    ul: {\n      marginBottom: 5,\n      marginLeft: 5\n    },\n    table: {\n      marginBottom: 5\n    },\n    th: {\n      bold: true,\n      fillColor: '#EEEEEE'\n    }\n  }; // store the references to the images\n\n  this.imagesRef = [];\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\n\n  this.changeDefaultStyles = function () {\n    for (var keyStyle in options.defaultStyles) {\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\n        // if we want to remove a default style\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\n          delete this.defaultStyles[keyStyle];\n        } else {\n          for (var k in options.defaultStyles[keyStyle]) {\n            // if we want to delete a specific property\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\n          }\n        }\n      } else {\n        // if we add default styles\n        this.defaultStyles[keyStyle] = {};\n\n        for (var ks in options.defaultStyles[keyStyle]) {\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\n        }\n      }\n    }\n  };\n\n  if (options && options.defaultStyles) {\n    this.changeDefaultStyles();\n  }\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\n\n\n  this.convertHtml = function (htmlText) {\n    // Create a HTML DOM tree out of html string\n    var parser = new this.wndw.DOMParser();\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\n    var docDef = this.parseElement(parsedHtml.body, []); // remove first level\n\n    return docDef.stack || docDef.text;\n  };\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\n\n\n  this.parseElement = function (element, parents) {\n    var nodeName = element.nodeName.toUpperCase();\n    var nodeNameLowerCase = nodeName.toLowerCase();\n    var ret = {\n      text: []\n    };\n    var text,\n        needStack = false;\n\n    var dataset,\n        i,\n        key,\n        _this = this; // ignore some HTML tags\n\n\n    if (['COLGROUP', 'COL'].indexOf(nodeName) > -1) return '';\n\n    switch (element.nodeType) {\n      case 3:\n        {\n          // TEXT_NODE\n          if (element.textContent) {\n            text = element.textContent; // check if we have 'white-space' in the parent's style\n\n            var styleParentTextNode = this.parseStyle(parents[parents.length - 1], true);\n            var hasWhiteSpace = false;\n\n            for (i = 0; i < styleParentTextNode.length; i++) {\n              if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\n                hasWhiteSpace = styleParentTextNode[i].value;\n                break;\n              }\n            } // if no 'white-space' style, then remove blanks\n\n\n            if (!hasWhiteSpace) text = element.textContent.replace(/\\n(\\s+)?/g, \"\");\n            if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents); // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\n\n            if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR', 'UL', 'OL'].indexOf(parents[parents.length - 1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n            if (text) {\n              ret = {\n                'text': text\n              };\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n              return ret;\n            }\n          }\n\n          return '';\n        }\n\n      case 1:\n        {\n          // ELEMENT_NODE\n          ret.nodeName = nodeName;\n          if (element.id) ret.id = element.id;\n          parents.push(element);\n\n          if (element.childNodes && element.childNodes.length > 0) {\n            [].forEach.call(element.childNodes, function (child) {\n              var res = _this.parseElement(child, parents);\n\n              if (res) {\n                if (Array.isArray(res.text) && res.text.length === 0) res.text = '';\n                ret.text.push(res);\n              }\n            }); //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\n            // find if we need a 'stack' instead of a 'text'\n\n            needStack = this.searchForStack(ret);\n\n            if (needStack) {\n              ret.stack = ret.text.slice(0);\n              delete ret.text;\n            } else {\n              // apply all the inhirent classes and styles from the parents\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n            }\n          }\n\n          parents.pop();\n\n          switch (nodeName) {\n            case \"TABLE\":\n              {\n                var rowIndex, cellIndex; // the format for the table is table.body[[], [], â€¦]\n\n                ret.table = {\n                  body: []\n                };\n                var tbodies = ret.stack || ret.text;\n\n                if (Array.isArray(tbodies)) {\n                  rowIndex = 0; // Array with All Rows including THEAD\n\n                  var allRows = []; // for each THEAD / TBODY\n\n                  tbodies.forEach(function (tbody) {\n                    // for each row\n                    var rows = tbody.stack || tbody.text;\n\n                    if (Array.isArray(rows)) {\n                      // Add rows to allRows\n                      allRows = allRows.concat(rows);\n                      rows.forEach(function (row) {\n                        var cells = row.stack || row.text; // for each cell\n\n                        if (Array.isArray(cells)) {\n                          cellIndex = 0;\n                          ret.table.body[rowIndex] = [];\n                          cells.forEach(function (cell) {\n                            ret.table.body[rowIndex].push(cell); // do we have a colSpan?\n                            // if yes, insert empty cells due to colspan\n\n                            if (cell.colSpan) {\n                              i = cell.colSpan; // do we have a rowSpan in addition of the colSpan?\n\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n\n                              while (--i > 0) {\n                                ret.table.body[rowIndex].push({\n                                  text: ''\n                                }); // keep adding empty cell due to rowspan\n\n                                _this.setRowSpan({\n                                  rows: allRows,\n                                  cell: cell,\n                                  rowIndex: rowIndex,\n                                  cellIndex: cellIndex\n                                });\n\n                                cellIndex++;\n                              }\n                            } else {\n                              // do we have a rowSpan ?\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n                            }\n\n                            cellIndex++;\n                          });\n                          rowIndex++;\n                        }\n                      });\n                    }\n                  });\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // if option tableAutoSize, then we try to apply the correct width/height on the table\n\n                if (this.tableAutoSize) {\n                  var cellsWidths = [];\n                  var cellsHeights = [];\n                  var tableWidths = [];\n                  var tableHeights = [];\n                  ret.table.body.forEach(function (row, rowIndex) {\n                    cellsWidths.push([]);\n                    cellsHeights.push([]);\n                    row.forEach(function (cell) {\n                      // we want to remember the different sizes\n                      var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\n                      var height = typeof cell.height !== 'undefined' ? cell.height : 'auto'; // check if we have colspan or rowspan\n                      // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\n\n                      if (width !== 'auto' && cell.colSpan) {\n                        if (!isNaN(width)) width /= cell.colSpan;else width = 'auto';\n                      }\n\n                      if (height !== 'auto' && cell.rowSpan) {\n                        if (!isNaN(height)) height /= cell.colSpan;else height = 'auto';\n                      }\n\n                      cellsWidths[rowIndex].push(width);\n                      cellsHeights[rowIndex].push(height);\n                    });\n                  }); // determine the max width for each cell\n\n                  cellsWidths.forEach(function (row) {\n                    row.forEach(function (cellWidth, cellIndex) {\n                      var type = typeof tableWidths[cellIndex];\n\n                      if (type === \"undefined\" || cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex] || cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto') {\n                        tableWidths[cellIndex] = cellWidth;\n                      }\n                    });\n                  }); // determine the max height for each row\n\n                  cellsHeights.forEach(function (row, rowIndex) {\n                    row.forEach(function (cellHeight) {\n                      var type = typeof tableHeights[rowIndex];\n\n                      if (type === \"undefined\" || cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex] || cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto') {\n                        tableHeights[rowIndex] = cellHeight;\n                      }\n                    });\n                  });\n                  if (tableWidths.length > 0) ret.table.widths = tableWidths;\n                  if (tableHeights.length > 0) ret.table.heights = tableHeights;\n                } // check if we have some data-pdfmake to apply\n\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\n                  dataset = element.dataset.pdfmake;\n                  if (dataset.charAt(1) === \"'\") dataset = dataset.replace(/'/g, '\"');\n\n                  try {\n                    dataset = JSON.parse(dataset);\n\n                    for (key in dataset) {\n                      if (key === \"layout\") {\n                        ret.layout = dataset[key];\n                      } else {\n                        ret.table[key] = dataset[key];\n                      }\n                    }\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n\n                break;\n              }\n\n            case \"TH\":\n            case \"TD\":\n              {\n                if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\") * 1;\n                if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\") * 1; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"SVG\":\n              {\n                ret = {\n                  svg: element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\n                  nodeName: 'SVG',\n                  style: ['html-svg']\n                };\n                break;\n              }\n\n            case \"BR\":\n              {\n                // for BR we return '\\n'\n                ret.text = [{\n                  text: '\\n'\n                }];\n                break;\n              }\n\n            case \"SUB\":\n            case \"SUP\":\n              {\n                ret[nodeName.toLowerCase()] = {\n                  offset: '30%',\n                  fontSize: 8\n                };\n                break;\n              }\n\n            case \"HR\":\n              {\n                // default style for the HR\n                var styleHR = {\n                  width: 514,\n                  type: \"line\",\n                  margin: [0, 12, 0, 12],\n                  thickness: 0.5,\n                  color: \"#000000\",\n                  left: 0\n                }; // we can override the default HR style with \"data-pdfmake\"\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  dataset = JSON.parse(element.dataset.pdfmake);\n\n                  for (key in dataset) {\n                    styleHR[key] = dataset[key];\n                  }\n                }\n\n                ret.margin = styleHR.margin;\n                ret.canvas = [{\n                  type: styleHR.type,\n                  x1: styleHR.left,\n                  y1: 0,\n                  x2: styleHR.width,\n                  y2: 0,\n                  lineWidth: styleHR.thickness,\n                  lineColor: styleHR.color\n                }];\n                delete ret.text;\n                break;\n              }\n\n            case \"OL\":\n            case \"UL\":\n              {\n                ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // check if we have `start`\n\n                if (element.getAttribute(\"start\")) {\n                  ret.start = element.getAttribute(\"start\") * 1;\n                } // check if we have `list-style-type` or `list-style`\n\n\n                if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\n                break;\n              }\n\n            case \"IMG\":\n              {\n                if (this.imagesByReference) {\n                  var src = element.getAttribute(\"src\");\n                  var index = this.imagesRef.indexOf(src);\n                  if (index > -1) ret.image = 'img_ref_' + index;else {\n                    ret.image = 'img_ref_' + this.imagesRef.length;\n                    this.imagesRef.push(src);\n                  }\n                } else {\n                  ret.image = element.getAttribute(\"src\");\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"A\":\n              {\n                // the link must be applied to the deeper `text`\n                var setLink = function setLink(pointer, href) {\n                  if (Array.isArray(pointer.text)) {\n                    return setLink(pointer.text[0], href);\n                  } // if 'href' starts with '#' then it's an internal link\n\n\n                  if (href.indexOf('#') === 0) pointer.linkToDestination = href.slice(1);else pointer.link = href;\n                  pointer.nodeName = \"A\";\n                  return pointer;\n                };\n\n                if (element.getAttribute(\"href\")) {\n                  ret = setLink(ret, element.getAttribute(\"href\"));\n                }\n\n                break;\n              }\n\n            case \"FONT\":\n              {\n                if (element.getAttribute(\"color\")) {\n                  ret.color = this.parseColor(element.getAttribute(\"color\"));\n                } // Checking if the element has a size attribute\n\n\n                if (element.getAttribute(\"size\")) {\n                  // Getting and sanitizing the size value: it should be included between 1 and 7\n                  var size = Math.min(Math.max(1, parseInt(element.getAttribute(\"size\"))), 7); // Getting the relative fontsize\n\n                  var fontSize = Math.max(this.fontSizes[0], this.fontSizes[size - 1]); // Assigning the font size\n\n                  ret.fontSize = fontSize;\n                } // Applying inherited styles\n\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            default:\n              {\n                // handle other cases\n                if (options && typeof options.customTag === \"function\") {\n                  ret = options.customTag.call(this, {\n                    element: element,\n                    parents: parents,\n                    ret: ret\n                  });\n                }\n              }\n          } // reduce the number of JSON properties\n\n\n          if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\n            ret.text = ret.text[0].text;\n          } // check if we have some data-pdfmake to apply\n\n\n          if (['HR', 'TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\n            dataset = JSON.parse(element.dataset.pdfmake);\n\n            for (key in dataset) {\n              ret[key] = dataset[key];\n            }\n          }\n\n          return ret;\n        }\n    }\n  };\n\n  this.searchForStack = function (ret) {\n    if (Array.isArray(ret.text)) {\n      for (var i = 0; i < ret.text.length; i++) {\n        if (ret.text[i].stack || ['P', 'DIV', 'TABLE', 'SVG', 'UL', 'OL', 'IMG', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(ret.text[i].nodeName) > -1) return true;\n        if (this.searchForStack(ret.text[i]) === true) return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\n\n\n  this.setRowSpan = function (params) {\n    var cells;\n\n    if (params.cell.rowSpan) {\n      for (var i = 1; i <= params.cell.rowSpan - 1; i++) {\n        cells = params.rows[params.rowIndex + i].text || params.rows[params.rowIndex + i].stack;\n        cells.splice(params.cellIndex, 0, {\n          text: ''\n        });\n      }\n    }\n  };\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\n\n\n  this.applyStyle = function (params) {\n    var cssClass = [];\n    var lastIndex = params.parents.length - 1;\n\n    var _this = this;\n\n    params.parents.forEach(function (parent, parentIndex) {\n      // classes\n      var parentNodeName = parent.nodeName.toLowerCase();\n      var htmlClass = 'html-' + parentNodeName;\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\n      var parentClass = (parent.getAttribute(\"class\") || \"\").split(' ');\n      parentClass.forEach(function (p) {\n        if (p) cssClass.push(p);\n      }); // styles\n\n      var style; // not all the CSS properties should be inherent\n\n      var ignoreNonDescendentProperties = parentIndex !== lastIndex; // 1) the default styles\n\n      if (_this.defaultStyles[parentNodeName]) {\n        for (style in _this.defaultStyles[parentNodeName]) {\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\n            if (!ignoreNonDescendentProperties || ignoreNonDescendentProperties && style.indexOf('margin') === -1 && style.indexOf('border') === -1) {\n              // 'decoration' can be an array\n              if (style === 'decoration') {\n                if (!Array.isArray(params.ret[style])) params.ret[style] = []; // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\n\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\n                }\n              } else {\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\n              }\n            }\n          }\n        }\n      } // 2) element's style\n      // we want TD/TH to receive descendant properties from TR\n\n\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties = false;\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\n      style.forEach(function (stl) {\n        // 'decoration' can be an array\n        if (stl.key === \"decoration\") {\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key] = [];\n          params.ret[stl.key].push(stl.value);\n        } else {\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\n          // then we should change the correct index in `params.ret.margin` to reflect it\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\n            // order: left | top | right | bottom\n            switch (stl.key) {\n              case \"marginLeft\":\n                params.ret.margin[0] = stl.value;\n                break;\n\n              case \"marginTop\":\n                params.ret.margin[1] = stl.value;\n                break;\n\n              case \"marginRight\":\n                params.ret.margin[2] = stl.value;\n                break;\n\n              case \"marginBottom\":\n                params.ret.margin[3] = stl.value;\n                break;\n            }\n          } else {\n            params.ret[stl.key] = stl.value;\n          }\n        }\n      });\n    });\n    params.ret.style = cssClass;\n    return params.ret;\n  };\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\n\n\n  this.parseStyle = function (element, ignoreProperties) {\n    var style = element.getAttribute(\"style\") || \"\";\n    style = style.split(';'); // check if we have \"width\" or \"height\"\n\n    if (element.getAttribute(\"width\")) {\n      style.unshift(\"width:\" + element.getAttribute(\"width\") + \"px\");\n    }\n\n    if (element.getAttribute(\"height\")) {\n      style.unshift(\"height:\" + element.getAttribute(\"height\") + \"px\");\n    }\n\n    var styleDefs = style.map(function (style) {\n      return style.toLowerCase().split(':');\n    });\n    var ret = [];\n    var borders = []; // special treatment for borders\n\n    var nodeName = element.nodeName.toUpperCase();\n\n    var _this = this;\n\n    styleDefs.forEach(function (styleDef) {\n      if (styleDef.length === 2) {\n        var key = styleDef[0].trim();\n        var value = styleDef[1].trim();\n\n        switch (key) {\n          case \"margin\":\n            {\n              if (ignoreProperties) break; // pdfMake uses a different order than CSS\n\n              value = value.split(' ');\n              if (value.length === 1) value = [value[0], value[0], value[0], value[0]];else if (value.length === 2) value = [value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\n              else if (value.length === 3) value = [value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\n                else if (value.length === 4) value = [value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\n              // we now need to convert to PT\n\n              value.forEach(function (val, i) {\n                value[i] = _this.convertToUnit(val);\n              }); // ignore if we have a FALSE in the table\n\n              if (value.indexOf(false) === -1) ret.push({\n                key: key,\n                value: value\n              });\n              break;\n            }\n\n          case \"text-align\":\n            {\n              ret.push({\n                key: \"alignment\",\n                value: value\n              });\n              break;\n            }\n\n          case \"font-weight\":\n            {\n              if (value === \"bold\") ret.push({\n                key: \"bold\",\n                value: true\n              });\n              break;\n            }\n\n          case \"text-decoration\":\n            {\n              ret.push({\n                key: \"decoration\",\n                value: _this.toCamelCase(value)\n              });\n              break;\n            }\n\n          case \"font-style\":\n            {\n              if (value === \"italic\") ret.push({\n                key: \"italics\",\n                value: true\n              });\n              break;\n            }\n\n          case \"font-family\":\n            {\n              ret.push({\n                key: \"font\",\n                value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\n                  return g[0].toUpperCase();\n                }).replace(/ ([a-z])/g, function (g) {\n                  return g[1].toUpperCase();\n                })\n              });\n              break;\n            }\n\n          case \"color\":\n            {\n              ret.push({\n                key: \"color\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"background-color\":\n            {\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\n              ret.push({\n                key: nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"text-indent\":\n            {\n              ret.push({\n                key: \"leadingIndent\",\n                value: _this.convertToUnit(value)\n              });\n              break;\n            }\n\n          case \"white-space\":\n            {\n              ret.push({\n                key: \"preserveLeadingSpaces\",\n                value: value === 'break-spaces' || value.slice(0, 3) === 'pre'\n              });\n              break;\n            }\n\n          default:\n            {\n              // for borders\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\n                if (!ignoreProperties) borders.push({\n                  key: key,\n                  value: value\n                });\n              } else {\n                // ignore some properties\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break; // padding is not supported by PDFMake\n\n                if (key.indexOf(\"padding\") === 0) break;\n                if (key.indexOf(\"-\") > -1) key = _this.toCamelCase(key);\n\n                if (value) {\n                  // convert value to a 'pt' when possible\n                  var parsedValue = _this.convertToUnit(value);\n\n                  ret.push({\n                    key: key,\n                    value: parsedValue === false ? value : parsedValue\n                  });\n                }\n              }\n            }\n        }\n      }\n    }); // for borders\n\n    if (borders.length > 0) {\n      // we have to merge together the borders in two properties\n      var border = []; // array of boolean\n\n      var borderColor = []; // array of colors\n\n      borders.forEach(function (b) {\n        // we have 3 properties: width style color\n        var properties = b.value.split(' ');\n        var width = properties[0].replace(/(\\d+)(\\.\\d+)?([^\\d]+)/g, \"$1$2 \").trim();\n        var index = -1,\n            i;\n        if (b.key.indexOf('-left') > -1) index = 0;else if (b.key.indexOf('-top') > -1) index = 1;else if (b.key.indexOf('-right') > -1) index = 2;else if (b.key.indexOf('-bottom') > -1) index = 3; // for the width\n\n        if (index > -1) {\n          border[index] = width > 0;\n        } else {\n          for (i = 0; i < 4; i++) {\n            border[i] = width > 0;\n          }\n        } // for the color\n\n\n        if (properties.length > 2) {\n          var color = properties.slice(2).join(' ');\n\n          if (index > -1) {\n            borderColor[index] = _this.parseColor(color);\n          } else {\n            for (i = 0; i < 4; i++) {\n              borderColor[i] = _this.parseColor(color);\n            }\n          }\n        }\n      }); // fill the gaps\n\n      for (var i = 0; i < 4; i++) {\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i] = true;\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i] = '#000000';\n      }\n\n      if (border.length > 0) ret.push({\n        key: 'border',\n        value: border\n      });\n      if (borderColor.length > 0) ret.push({\n        key: 'borderColor',\n        value: borderColor\n      });\n    }\n\n    return ret;\n  };\n\n  this.toCamelCase = function (str) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  };\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\n\n\n  this.parseColor = function (color) {\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$'); // e.g. `#fff` or `#ff0048`\n\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\\\\)$'); // e.g. rgb(0,255,34) or rgb(22, 0, 0)\n\n    var nameRegex = new RegExp('^[a-z]+$');\n\n    if (haxRegex.test(color)) {\n      return color;\n    } else if (rgbRegex.test(color)) {\n      var decimalColors = rgbRegex.exec(color).slice(1);\n\n      for (var i = 0; i < 3; i++) {\n        var decimalValue = +decimalColors[i];\n\n        if (decimalValue > 255) {\n          decimalValue = 255;\n        }\n\n        var hexString = '0' + decimalValue.toString(16);\n        hexString = hexString.slice(-2);\n        decimalColors[i] = hexString;\n      }\n\n      return '#' + decimalColors.join('');\n    } else if (nameRegex.test(color)) {\n      return color === \"transparent\" ? \"white\" : color;\n    } else {\n      console.error('Could not parse color \"' + color + '\"');\n      return color;\n    }\n  };\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\n\n\n  this.convertToUnit = function (val) {\n    // if it's just a number, then return it\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val * 1;\n    var mtch = (val + \"\").trim().match(/^(\\d+(\\.\\d+)?)(pt|px|r?em|cm)$/); // if we don't have a number with supported units, then return false\n\n    if (!mtch) return false;\n    val = mtch[1];\n\n    switch (mtch[3]) {\n      case 'px':\n        {\n          val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\n\n          break;\n        }\n\n      case 'em':\n      case 'rem':\n        {\n          val *= 12; // default font-size is 12pt\n\n          break;\n        }\n\n      case 'cm':\n        {\n          val = Math.round(val * 28.34646); // 1cm => 28.34646\n\n          break;\n        }\n    }\n\n    return val * 1;\n  };\n\n  var result = this.convertHtml(htmlText); // if we only pass a string without HTML code\n\n  if (typeof result === \"string\") result = {\n    text: result\n  }; // if images by reference\n\n  if (this.imagesByReference) {\n    result = {\n      content: result,\n      images: {}\n    };\n    this.imagesRef.forEach(function (src, i) {\n      result.images['img_ref_' + i] = src;\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = function (htmlText, options) {\n  return new htmlToPdfMake(htmlText, options);\n};","map":{"version":3,"sources":["E:/MesProjects_Angulars/material-dashboard-pro-angular-v2.5.0/material-dashboard-pro-angular-v2.5.0/node_modules/html-to-pdfmake/index.js"],"names":["htmlToPdfMake","htmlText","options","wndw","window","tableAutoSize","imagesByReference","fontSizes","Array","isArray","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parser","DOMParser","parsedHtml","parseFromString","docDef","parseElement","body","stack","text","element","parents","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","needStack","dataset","key","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","value","replace","replaceText","applyStyle","id","push","childNodes","forEach","call","child","res","searchForStack","slice","pop","rowIndex","cellIndex","tbodies","allRows","tbody","rows","concat","row","cells","cell","colSpan","setRowSpan","cellsWidths","cellsHeights","tableWidths","tableHeights","width","height","isNaN","rowSpan","cellWidth","type","cellHeight","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","getAttribute","svg","outerHTML","style","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","src","index","image","setLink","pointer","href","linkToDestination","link","parseColor","size","Math","min","max","parseInt","customTag","params","splice","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","parentClass","split","ignoreNonDescendentProperties","stringify","stl","ignoreProperties","styleDefs","map","borders","styleDef","trim","val","convertToUnit","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","haxRegex","RegExp","rgbRegex","nameRegex","test","decimalColors","exec","decimalValue","hexString","toString","parseFloat","isFinite","mtch","match","round","result","content","images","module","exports"],"mappings":"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","sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = false;\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then remove blanks\r\n          if (!hasWhiteSpace) text = element.textContent.replace(/\\n(\\s+)?/g, \"\");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex, cellIndex;\r\n            // the format for the table is table.body[[], [], â€¦]\r\n            ret.table = {body:[]};\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var allRows = [];\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  // Add rows to allRows\r\n                  allRows = allRows.concat(rows);\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      cellIndex = 0;\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan) {\r\n                          i = cell.colSpan;\r\n                          // do we have a rowSpan in addition of the colSpan?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                            // keep adding empty cell due to rowspan\r\n                            _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                            cellIndex++;\r\n                          }\r\n                        } else {\r\n                          // do we have a rowSpan ?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                        }\r\n\r\n                        cellIndex++;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan) {\r\n                    if (!isNaN(height)) height /= cell.colSpan;\r\n                    else height = 'auto';\r\n                  }\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) ret.table.widths = tableWidths;\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG',\r\n              style:['html-svg']\r\n            }\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+index;\r\n              else {\r\n                ret.image = 'img_ref_'+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text`\r\n            var setLink = function(pointer, href) {\r\n              if (Array.isArray(pointer.text)) {\r\n                return setLink(pointer.text[0], href);\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              pointer.nodeName = \"A\";\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n            }\r\n            break;\r\n          }\r\n          case \"FONT\": {\r\n            if (element.getAttribute(\"color\")) {\r\n              ret.color = this.parseColor(element.getAttribute(\"color\"));\r\n            }\r\n            // Checking if the element has a size attribute\r\n            if (element.getAttribute(\"size\")) {\r\n              // Getting and sanitizing the size value: it should be included between 1 and 7\r\n              var size = Math.min(Math.max(1, parseInt(element.getAttribute(\"size\"))), 7);\r\n\r\n              // Getting the relative fontsize\r\n              var fontSize = Math.max(this.fontSizes[0], this.fontSizes[size - 1]);\r\n\r\n              // Assigning the font size\r\n              ret.fontSize = fontSize;\r\n            }\r\n\r\n            // Applying inherited styles\r\n            ret = this.applyStyle({\r\n              ret: ret,\r\n              parents: parents.concat([element]),\r\n            });\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (options && typeof options.customTag === \"function\") {\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\r\n  this.setRowSpan = function(params) {\r\n    var cells;\r\n    if (params.cell.rowSpan) {\r\n      for (var i=1; i <= params.cell.rowSpan-1; i++) {\r\n        cells = (params.rows[params.rowIndex+i].text || params.rows[params.rowIndex+i].stack);\r\n        cells.splice(params.cellIndex, 0, {text:''});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      var htmlClass = 'html-' + parentNodeName;\r\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    style = style.split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    if (element.getAttribute(\"width\")) {\r\n      style.unshift(\"width:\" + element.getAttribute(\"width\") + \"px\");\r\n    }\r\n    if (element.getAttribute(\"height\")) {\r\n      style.unshift(\"height:\" + element.getAttribute(\"height\") + \"px\");\r\n    }\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var ret = [];\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim();\r\n        var value = styleDef[1].trim();\r\n        switch (key) {\r\n          case \"margin\": {\r\n            if (ignoreProperties) break;\r\n            // pdfMake uses a different order than CSS\r\n            value = value.split(' ');\r\n            if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n            else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n            else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n            else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n            // we now need to convert to PT\r\n            value.forEach(function(val, i) {\r\n              value[i] = _this.convertToUnit(val);\r\n            });\r\n            // ignore if we have a FALSE in the table\r\n            if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n            break;\r\n          }\r\n          case \"text-align\": {\r\n            ret.push({key:\"alignment\", value:value});\r\n            break;\r\n          }\r\n          case \"font-weight\": {\r\n            if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n            break;\r\n          }\r\n          case \"text-decoration\": {\r\n            ret.push({key:\"decoration\", value:_this.toCamelCase(value)})\r\n            break;\r\n          }\r\n          case \"font-style\": {\r\n            if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n            break;\r\n          }\r\n          case \"font-family\": {\r\n            ret.push({key:\"font\", value:value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g,\"\").replace(/^([a-z])/g, function (g) { return g[0].toUpperCase() }).replace(/ ([a-z])/g, function (g) { return g[1].toUpperCase() })});\r\n            break;\r\n          }\r\n          case \"color\": {\r\n            ret.push({key:\"color\", value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"background-color\": {\r\n            // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n            ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"text-indent\": {\r\n            ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n            break;\r\n          }\r\n          case \"white-space\": {\r\n            ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n            break;\r\n          }\r\n          default: {\r\n            // for borders\r\n            if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n              if (!ignoreProperties) borders.push({key:key, value:value});\r\n            } else {\r\n              // ignore some properties\r\n              if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n              // padding is not supported by PDFMake\r\n              if (key.indexOf(\"padding\") === 0) break;\r\n              if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n              if (value) {\r\n                // convert value to a 'pt' when possible\r\n                var parsedValue = _this.convertToUnit(value);\r\n                ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d+)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color);\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color);\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\r\n  this.parseColor = function(color) {\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$');\r\n\r\n    // e.g. `#fff` or `#ff0048`\r\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\\\\)$');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0)\r\n    var nameRegex = new RegExp('^[a-z]+$');\r\n\r\n    if (haxRegex.test(color)) {\r\n      return color;\r\n    } else if (rgbRegex.test(color)) {\r\n      var decimalColors = rgbRegex.exec(color).slice(1);\r\n      for (var i = 0; i < 3; i++) {\r\n        var decimalValue = +decimalColors[i];\r\n        if (decimalValue > 255) {\r\n          decimalValue = 255;\r\n        }\r\n        var hexString = '0' + decimalValue.toString(16);\r\n        hexString = hexString.slice(-2);\r\n        decimalColors[i] = hexString;\r\n      }\r\n      return '#' + decimalColors.join('');\r\n    } else if (nameRegex.test(color)) {\r\n      return (color === \"transparent\" ? \"white\" : color);\r\n    } else {\r\n      console.error('Could not parse color \"' + color + '\"');\r\n      return color;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d+(\\.\\d+)?)(pt|px|r?em|cm)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      result.images['img_ref_'+i] = src;\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}